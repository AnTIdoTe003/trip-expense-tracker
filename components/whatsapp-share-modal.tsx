"use client"
import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { MessageCircle, Copy, Send, Users, User } from "lucide-react"
import { formatForWhatsApp, createWhatsAppShareUrl, truncateForWhatsApp } from "@/lib/whatsapp-formatter"

interface WhatsAppShareModalProps {
  isOpen: boolean
  onClose: () => void
  summary: string
  tripName: string
}

export function WhatsAppShareModal({ isOpen, onClose, summary, tripName }: WhatsAppShareModalProps) {
  const [phoneNumber, setPhoneNumber] = useState("")
  const [customMessage, setCustomMessage] = useState("")
  const [shareMode, setShareMode] = useState<"general" | "contact" | "custom">("general")
  const [copied, setCopied] = useState(false)

  const formattedMessage = formatForWhatsApp(summary, tripName)
  const truncatedMessage = truncateForWhatsApp(formattedMessage)

  const handleShare = (mode: "general" | "contact" | "custom") => {
    let message = ""
    let url = ""

    switch (mode) {
      case "general":
        message = truncatedMessage
        url = createWhatsAppShareUrl(message)
        break
      case "contact":
        if (!phoneNumber) {
          alert("Please enter a phone number")
          return
        }
        message = truncatedMessage
        url = createWhatsAppShareUrl(message, phoneNumber.replace(/\D/g, ''))
        break
      case "custom":
        if (!customMessage.trim()) {
          alert("Please enter a custom message")
          return
        }
        const customFormatted = `ðŸ§¾ *${tripName} - Expense Summary*\n\n${customMessage}\n\nðŸ“± _Generated by Trip Expense Manager_\nðŸ”— https://trip.debmalya.in`
        url = createWhatsAppShareUrl(customFormatted)
        break
    }

    window.open(url, '_blank')
    onClose()
  }

  const copyToClipboard = () => {
    navigator.clipboard.writeText(truncatedMessage)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto bg-white">
        <DialogHeader>
          <DialogTitle className="flex items-center">
            <MessageCircle className="h-5 w-5 mr-2 text-green-600" />
            Share to WhatsApp
          </DialogTitle>
          <DialogDescription>
            Choose how you'd like to share your trip expense summary
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6">
          {/* Share Options */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
            <Button
              variant={shareMode === "general" ? "default" : "outline"}
              onClick={() => setShareMode("general")}
              className="h-auto p-4 flex flex-col items-center gap-2"
            >
              <Users className="h-6 w-6" />
              <div className="text-center">
                <div className="font-medium">General Share</div>
                <div className="text-xs text-muted-foreground">Open WhatsApp with message</div>
              </div>
            </Button>

            <Button
              variant={shareMode === "contact" ? "default" : "outline"}
              onClick={() => setShareMode("contact")}
              className="h-auto p-4 flex flex-col items-center gap-2"
            >
              <User className="h-6 w-6" />
              <div className="text-center">
                <div className="font-medium">Specific Contact</div>
                <div className="text-xs text-muted-foreground">Send to phone number</div>
              </div>
            </Button>

            <Button
              variant={shareMode === "custom" ? "default" : "outline"}
              onClick={() => setShareMode("custom")}
              className="h-auto p-4 flex flex-col items-center gap-2"
            >
              <MessageCircle className="h-6 w-6" />
              <div className="text-center">
                <div className="font-medium">Custom Message</div>
                <div className="text-xs text-muted-foreground">Write your own message</div>
              </div>
            </Button>
          </div>

          {/* Phone Number Input */}
          {shareMode === "contact" && (
            <div className="space-y-2">
              <Label htmlFor="phone">Phone Number (with country code)</Label>
              <Input
                id="phone"
                type="tel"
                placeholder="e.g., +1234567890"
                value={phoneNumber}
                onChange={(e) => setPhoneNumber(e.target.value)}
              />
              <p className="text-xs text-muted-foreground">
                Include country code (e.g., +91 for India, +1 for US)
              </p>
            </div>
          )}

          {/* Custom Message Input */}
          {shareMode === "custom" && (
            <div className="space-y-2">
              <Label htmlFor="custom-message">Custom Message</Label>
              <Textarea
                id="custom-message"
                placeholder="Write your custom message here..."
                value={customMessage}
                onChange={(e) => setCustomMessage(e.target.value)}
                rows={4}
              />
              <p className="text-xs text-muted-foreground">
                This will replace the AI-generated summary with your custom message
              </p>
            </div>
          )}

          {/* Preview */}
          {shareMode !== "custom" && (
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label>Message Preview</Label>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={copyToClipboard}
                  className="h-8"
                >
                  <Copy className="h-3 w-3 mr-1" />
                  {copied ? "Copied!" : "Copy"}
                </Button>
              </div>
              <div className="bg-muted p-3 rounded-lg max-h-40 overflow-y-auto text-sm font-mono whitespace-pre-wrap">
                {truncatedMessage}
              </div>
              <p className="text-xs text-muted-foreground">
                {truncatedMessage.length > 4000 && "Message has been truncated to fit WhatsApp's limits"}
              </p>
            </div>
          )}

          {/* Action Buttons */}
          <div className="flex gap-3">
            <Button
              onClick={() => handleShare(shareMode)}
              className="flex-1"
              disabled={shareMode === "contact" && !phoneNumber}
            >
              <Send className="h-4 w-4 mr-2" />
              Share to WhatsApp
            </Button>
            <Button variant="outline" onClick={onClose}>
              Cancel
            </Button>
          </div>

          {/* Tips */}
          <Alert>
            <MessageCircle className="h-4 w-4" />
            <AlertDescription>
              <strong>Tips:</strong>
              <ul className="mt-1 space-y-1 text-sm">
                <li>â€¢ Make sure WhatsApp is installed on your device</li>
                <li>â€¢ For specific contacts, include the country code</li>
                <li>â€¢ Long summaries are automatically truncated for WhatsApp</li>
              </ul>
            </AlertDescription>
          </Alert>
        </div>
      </DialogContent>
    </Dialog>
  )
}
